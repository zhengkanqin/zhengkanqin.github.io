
<template>
	<view class="waterfall">
		<uv-sticky>
			<view style="padding: 10rpx 0;background-color: #fff;">
				<uv-tabs :list="[{ name: '美食' }, { name: '文化' }, { name: '科技' }]" @click="tabChange"></uv-tabs>
			</view>
		</uv-sticky>
		<view>
			<!-- #ifndef APP-NVUE -->
			<uv-waterfall ref="waterfall"
				v-model="list"
				:add-time="10"
				:left-gap="leftGap"
				:right-gap="rightGap"
				:column-gap="columnGap"
				@changeList="changeList"
				@remove="remove">
				<!-- 第一列数据 -->
				<template v-slot:list1>
					<!-- 为了磨平部分平台的BUG，必须套一层view -->
					<view>
						<view v-for="(item, index) in list1"
							:key="item.id"
							class="waterfall-item"
							@longpress="longHandle(item)">
							<view class="waterfall-item__image" :style="[imageStyle(item)]">
								<image :src="item.image" mode="widthFix" :style="{width:item.width+'px'}"></image>
							</view>
							<view class="waterfall-item__ft">
								<view class="waterfall-item__ft__title">
									<text class="value">{{item.title}}</text>
								</view>
								<view class="waterfall-item__ft__desc uv-line-2">
									<text class="value">{{item.desc}}</text>
								</view>
								<view class="waterfall-item__ft__btn" v-if="index==0">
									<button type="primary" style="height: 60rpx;line-height: 60rpx;font-size: 28rpx;" @click="edit(item)">异步修改</button>
								</view>
							</view>
						</view>
					</view>
				</template>
				<!-- 第二列数据 -->
				<template v-slot:list2>
					<!-- 为了磨平部分平台的BUG，必须套一层view -->
					<view>
						<view v-for="(item, index) in list2"
							:key="item.id"
							class="waterfall-item">
							<view class="waterfall-item__image" :style="[imageStyle(item)]">
								<image :src="item.image" mode="widthFix" :style="{width:item.width+'px'}"></image>
							</view>
							<view class="waterfall-item__ft">
								<view class="waterfall-item__ft__title">
									<text class="value">{{item.title}}</text>
								</view>
								<view class="waterfall-item__ft__desc uv-line-2">
									<text class="value">{{item.desc}}</text>
								</view>
							</view>
						</view>
					</view>
				</template>
			</uv-waterfall>
			<uv-load-more :status="loadStatus"></uv-load-more>
			<!-- #endif -->
			<!-- #ifdef APP-NVUE -->
			<uv-waterfall 
				column-count="2"
				left-gap="10"
				right-gap="10"
				column-gap="8"
				:height="waterfallHeight"
				@scrolltolower="init">
					<cell 
						v-for="(item,index) in list"
						class="waterfall-item-cell"
					>
						<view class="waterfall-item">
							<view class="waterfall-item__image">
									<image class="img" :src="item.image" mode="widthFix" style="border-radius: 20rpx;"></image>
							</view>
							<view class="waterfall-item__ft">
								<view class="waterfall-item__ft__title">
									<text class="value">{{item.title}}</text>
								</view>
								<view class="waterfall-item__ft__desc uv-line-2">
									<text class="value">{{item.desc}}</text>
								</view>
							</view>
						</view>
						<view style="height: 4px;width: 4px;"></view>
					</cell>
				</uv-waterfall>
			<!-- #endif -->
		</view>
	</view>
</template>
<script>
	import { guid, sys, getPx } from '@/uni_modules/uv-ui-tools/libs/function/index.js'
	export default {
		data() {
			return {
				list: [],// 瀑布流全部数据
				list1: [],// 瀑布流第一列数据
				list2: [],// 瀑布流第二列数据
				loadStatus: 'loadmore',
				leftGap: 10,
				rightGap: 10,
				columnGap: 10
			}
		},
		computed: {
			waterfallHeight() {
				return sys().windowHeight - getPx('120rpx');
			},
			imageStyle(item) {
				return item=>{
					const v = uni.upx2px(750) - this.leftGap - this.rightGap - this.columnGap;
					const w = v/2;
					const rate = w / item.w;
					const h = rate* item.h;
					return {
						width: w + 'px',
						height: h + 'px'
					}
				}
			}
		},
		async onLoad() {
			const { data } = await this.getData();
			this.list = data;
		},
		onHide() {
			// #ifndef APP-NVUE
			this.$refs.waterfall.clear();
			// #endif
		},
		// 下拉刷新数据
		async onPullDownRefresh() {
			this.list = [];
			// #ifndef APP-NVUE
			this.$refs.waterfall.clear();
			// #endif
			this.list1 = [];
			this.list2 = [];
			this.init();
			uni.showToast({
				icon: 'success',
				title: '刷新成功'
			})
			uni.stopPullDownRefresh();
		},
		// 触底加载更多
		async onReachBottom() {
			if(this.loadStatus == 'loadmore') {
				this.init();
			}
		},
		methods: {
			// 选项卡切换
			tabChange(index) {
				// #ifndef APP-NVUE
				this.$refs.waterfall.clear();
				// #endif
				this.list = [];
				this.list1 = [];
				this.list2 = [];
				this.init();
			},
			// 这点非常重要：e.name在这里返回是list1或list2，要手动将数据追加到相应列
			changeList(e){
				this[e.name].push(e.value);
			},
			async init() {
				this.loadStatus = 'loading';
				const { data } = await this.getData();
				this.list.push.apply(this.list,data);
				this.loadStatus = 'loadmore';
			},
			// 长按某项执行删除操作
			longHandle(item) {
				let that = this;
				uni.showModal({
					title: '提示',
					content: '你确定删除该项？',
					success(res) {
						if (res.confirm) {
							that.$refs.waterfall.remove(item.id);
						}
					}
				})
			},
			// 删除某项后返回对应id，根据id标识在列数据中手动删除该项数据
			remove(id){
				this.list1.forEach((item,index)=>{
					if(item.id == id){
						this.list1.splice(index,1);
					}
				})
				this.list2.forEach((item,index)=>{
					if(item.id == id){
						this.list2.splice(index,1);
					}
				})
			},
			// 修改某项数据
			edit(item) {
				uni.showLoading({
					title: '修改中'
				})
				setTimeout(() => {
					item.title = 'uv-ui1.0';
					item.desc = '修改后的文本';
					uni.hideLoading();
				}, 1000)
			},
			// 模拟的后端数据
			getData() {
				return new Promise((resolve)=>{
					const imgs = [
						{url: 'https://via.placeholder.com/100x110.png/3c9cff/fff',width: 100, height: 110},
						{url: 'https://via.placeholder.com/200x220.png/f9ae3d/fff',width: 200, height: 220},
						{url: 'https://via.placeholder.com/300x340.png/5ac725/fff',width: 300, height: 340},
						{url: 'https://via.placeholder.com/400x400.png/f56c6c/fff',width: 400, height: 400},
						{url: 'https://via.placeholder.com/500x510.png/909399/fff',width: 500, height: 510},
						{url: 'https://via.placeholder.com/600x606.png/3c9cff/fff',width: 600, height: 606},
						{url: 'https://via.placeholder.com/310x422.png/f1a532/fff',width: 310, height: 422},
						{url: 'https://via.placeholder.com/320x430.png/3c9cff/fff',width: 320, height: 430},
						{url: 'https://via.placeholder.com/330x424.png/f9ae3d/fff',width: 330, height: 424},
						{url: 'https://via.placeholder.com/340x435.png/5ac725/fff',width: 340, height: 435},
						{url: 'https://via.placeholder.com/350x440.png/f56c6c/fff',width: 350, height: 440},
						{url: 'https://via.placeholder.com/380x470.png/909399/fff',width: 380, height: 470}
					];
					let list = [];
					const doFn = (i)=>{
						const randomIndex = Math.floor(Math.random() * 10);
						return {
							id: guid(),
							allowEdit: i==0,
							image: imgs[randomIndex].url,
							w: imgs[randomIndex].width,
							h: imgs[randomIndex].height,
							title: i % 2 == 0 ? `(${this.list.length + i + 1})体验uv-ui框架`: `(${this.list.length + i +1})uv-ui支持多平台`,
							desc: i % 2 == 0 ? `(${this.list.length + i + 1})欢迎使用uv-ui，uni-app生态专用的UI框架` : 
							`(${this.list.length + i})开发者编写一套代码， 可发布到iOS、Android、H5、以及各种小程序`
						}
					};
					// 模拟异步
					setTimeout(() => {
						for (let i = 0; i < 20; i++) {
							list.push(doFn(i));
						}
						resolve({data:list});
					}, 200)
				})
			}
		}
	}
</script>
<style>
	/* #ifndef APP-NVUE */
	page {
		background: #f1f1f1;
	}
	/* #endif */
</style>
<style scoped lang="scss">
	$show-lines: 1;
	@import '@/uni_modules/uv-ui-tools/libs/css/variable.scss';
	.waterfall {
		background-color: #f1f1f1;
	}
	.waterfall-item {
		overflow: hidden;
		margin-top: 10px;
		border-radius: 6px;
	}
	.waterfall-item__ft {
		padding: 20rpx;
		background: #fff;
		&__title {
			margin-bottom: 10rpx;
			line-height: 48rpx;
			font-weight: 700;
			.value {
				font-size: 32rpx;
				color: #303133;
			}
		}
		&__desc .value {
			font-size: 28rpx;
			color: #606266;
		}
		&__btn {
			padding: 10px 0;
		}
	}
</style>